* small scale business organiazations :- grossary shop, petrol pump
* large scale business organizations :- HDFC bank, Indian railway, SBI, PEPSI, MASTERCARD

These Business Organizations provides their services to client/customer. and to computerized those services 
what ever application we develop is known as business application.


* Common general things in any business organizations :
1. store and maintain business data in a secure and easily retrival manner. (inside the RDBMS)
2. processing that data according to the business rule.
3. presenting the data in user-understandable format.


* Data and information :-
===========================

Data :- it is a collection of raw and isolated facts.
Information :- when we process the data, then we gets meaningfull results, this is called inforamtion.


* Datastore :-

It is a store where we can store or keep the data.
for ex.,
1. normal books and papers
2. flat files in computer system (notepad, excel sheet, word files)

The disadvantages of flat files are :
1. data maintainance
2. data redundancy
3. data integrity
4. security
5. data retrival
to overcome these problems we need to store the data inside the DBMS s/w (RDBMS s/w)

Database :- it is a organized collection of interrelated data or structured collection of data.

DBMS is a type of s/w there we can manage multiple databases.

RDBMS :- in this model, the data is stored in two dimensional tables.
we have multiple RDBMS s/w.
for ex., MySQL (Oracle), Oracle s/w, postgress, ms-access, sql-serverr, db2 etc.

RDBMS is an extension of DBMS s/w.

Note : every RDBMS is a DBMS but reverse is not true.

- All the RDBMS s/w have a "DB-Engine" which is the heart of the RDBS s/w and it is responsible to execute sql query.
(that query could be suppied by either command line client or from mysql workbench)

- In order to work with RDBMS we need to use SQL. It is an interface by using which we can work with any kind of RDBMS s/w.

- SQL is a case insensitive language.

- SQL language is a collection or predefined commands.
these commands are categorized into following categories :

1.DDL (Data defination language)
(create, alter, drop, truncate, rename)
========================================

1) create :- create table student(roll int,name varchar(12),marks int);

or

create table student
(
roll int,
name varchar(12),
marks int
);

2) alter :- It is used to change the structure of existing table.
	this command has 4 sub-commands :

	a. add :- it is used to add the new cols in the existing table
	ex., alter table tb_name add col_name;

	b. modify :- it is used to change the col datatype of col size.
	ex., alter table tb_name modify col_name data-type(size)

	c. drop :- to drop a single or multiple columns in table.
	ex., alter table tb_name drop column col_name;

	d. change :- to rename a column : 
	ex., alter table tb_name change existing_col_name new_col_name datatype;

3) drop :- It is used to drop a entire table
	ex., drop table tb_name;
	Note : It can't be rolledback. (DDL command can't be rolled back)

4) truncate : this command is used to truncate all the rows/records permanently fom the table 
	- this command also can not be rolledback.
	ex., truncate table tb_name;

5) rename :- it is used to rename table.
	ex., rename table exisiting_tb_name to new_tb_name; 


2. DML (Data manipulation Language)
(insert, update, delete)
===================================

1) insert :- Inserting all columns values.
------------------------------------------

> insert into tb_name values();
> inserting partial columns values : insert into tb_name(col_names) values();

2) update : It is used to update the date within a table.
---------------------------------------------------------

ex1: updating all the marks for all the students.

> update student set marks=marks+50;

ex2: updating marks for name is ram.

>update student set marks=marks+50 where name='ram';

>update student set marks=marks+50 where marks > 800;

>update student set name='mukesh' where roll=30;

3) delete : It is used to delete the records/rows from the table.
---------------------------------------------------------------------

delete from tb_name; //It will delete entire record from the table like truncate command
- This delete command we can rollback inside the transactional area, whereas truncate command we can not rollback.

delete from tb_name where col_name = "";





3.DRL (Data Retrival language)
(select)
================================

this command is used to quering a database tables.

syntax: 

select col1,col2,.. 
from tablename
where condition
[groupby colname]
having condition
orderby colname [asc/desc]

ex., select * from tb_name;
	to display all the column and all the rows.

ex., select * from tb_name where col_name = value;
	restricting the rows by using where clause.

select (projecting columns )
from (from which tables(s) )
where (condition )

using order by : to sort the record.
1) asc	: if u want to data sort in ascending order	
2) desc : if u want to sort data in descending order.

ex., select * from tb_name ORDER BY col_name desc;



4.TCL (Transaction control language)
(commit, rollback, savepoint)
======================================



5. DCL (Decision Control language)
(grant revoke)
====================================


DBA : DDL , DCL
Java developer :(Select, Insert, update, delete ) 
CRUD Operation :- 
C - create/insert (record creation)
R - select retrieve a record
U - update a record
D - delete record  


1) show databases; 
	It is used to display all databases present in your system.

2) create database db_name;
	It is used to create new database which u want

3) use db_name;
	on which database u want to do work 

4) show tables;
	to display all tables in database

5) create table student(roll int,name varchar(12),marks int);

or

create table student
(
roll int,
name varchar(12),
marks int
);

6) desc tb_name;
	to display the structure of your table or description of your table.

7) select * from tb_name;
	to display all the data or record of table



* Datatypes is MySQL :
========================
1. numeric types :-
	tinyint : 1 byte
	smallint : 2 byte
	mediumint : 3 byte
	int : 4 byte
	bigint : 8 byte

	floating point : 
	float(6, 2) : the column can store 6 digit with 2 decimal places.

2. String type :
	char : fixed length of string range between 0 to 255 char 
	varchar : variable length of string between 1 to 65500. Here we must define the length.
	ex., char(4) :- 

	value     char(4)   storage_required

'a'           ------->  4 bytes

'ab'        ------->   4 bytes

'abcdef'   ------> error data is too long



	varchar(4)

value     varchar(4)   storage_required

'a'           ------->  1 bytes

'ab'        ------->   2 bytes

'abcdef'   ------> error data is too long

Note: in the term of efficiency , if we r storing string with variable length then we should use varchar, 
and if the length is always fixed then we should use char, here char is slightly faster than varchar.

3. Date and Time :
	a. date :- yyyy-mm-dd
	b. date-time :- yyyy-mm-dd hh:mm:ss



Operators :
===========

1. Arithmetic operators : (*, /, +, -, %)
------------------------------------------

Note : mostly arithmetic operator are used after select statement (90%)
and all other type of remaining operators are used in where clause only.

ex., select name, marks, marks+100 from student;
It will display result in three columns which is marks+100 will be extra column

ex., select name, marks, marks+100 Gracemarks from student;
It will create thired column with name gracemarks

Note : This temporary name of column we can not use inside where clause because it's not present physically in table. 
It is used for only display the result.


2. Relational Operators : (=, >, <, <=, >=, [!= or <>])

3. Logical Operators : (AND, OR, NOT)

4. Special Operator : 
------------------------

A.) IN .... NOT IN

1) select * from student where marks IS NULL;
2) select * from student where marks between 500 AND 800;
	OR
select * from student where marks>=500 AND marks<=800;


B.) BETWEEN  ----> NOT BETWEEN

C.) IS NULL  ----> IS NOT NULL 

D.) LIKE ---->  NOT LIKE :- it is used to retrive the data based on character pattern.
	1. % :- it represents string or group of characters.
	2. _ :- it represents a single character.

	ex., 1) select * from student where name LIKE 'r%'; 
			name should be start with r

		 2) select * from student where name LIKE '%r%';
			 in name r should be any character.

		 3) select * from student where name LIKE '%r'; 
			r should be end with name





5. Using distinct : getting unique data 
ex., select distinct marks from student.
It will avoid the duplicate marks in table.

